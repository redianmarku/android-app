{"version":3,"sources":["../../src/addon/mod/chat/pages/session-messages/session-messages.module.ts","../../src/addon/mod/chat/pages/session-messages/session-messages.ts"],"names":[],"mappings":"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","file":"119.js","sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CoreComponentsModule } from '@components/components.module';\nimport { CoreDirectivesModule } from '@directives/directives.module';\nimport { CorePipesModule } from '@pipes/pipes.module';\nimport { AddonModChatComponentsModule } from '../../components/components.module';\nimport { AddonModChatSessionMessagesPage } from './session-messages';\n\n@NgModule({\n    declarations: [\n        AddonModChatSessionMessagesPage,\n    ],\n    imports: [\n        CoreComponentsModule,\n        CoreDirectivesModule,\n        CorePipesModule,\n        AddonModChatComponentsModule,\n        IonicPageModule.forChild(AddonModChatSessionMessagesPage),\n        TranslateModule.forChild()\n    ],\n})\nexport class AddonModChatSessionMessagesPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/chat/pages/session-messages/session-messages.module.ts","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component } from '@angular/core';\nimport { IonicPage, NavParams } from 'ionic-angular';\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\nimport { CoreSitesProvider } from '@providers/sites';\nimport { CoreUserProvider } from '@core/user/providers/user';\nimport { AddonModChatProvider } from '../../providers/chat';\nimport { AddonModChatHelperProvider, AddonModChatSessionMessageForView } from '../../providers/helper';\n\n/**\n * Page that displays list of chat session messages.\n */\n@IonicPage({ segment: 'addon-mod-chat-session-messages' })\n@Component({\n    selector: 'page-addon-mod-chat-session-messages',\n    templateUrl: 'session-messages.html',\n})\nexport class AddonModChatSessionMessagesPage {\n\n    currentUserId: number;\n    cmId: number;\n    messages: AddonModChatSessionMessageForView[] = [];\n    loaded = false;\n\n    protected courseId: number;\n    protected chatId: number;\n    protected sessionStart: number;\n    protected sessionEnd: number;\n    protected groupId: number;\n\n    constructor(navParams: NavParams, private domUtils: CoreDomUtilsProvider, private chatProvider: AddonModChatProvider,\n        sitesProvider: CoreSitesProvider, private chatHelper: AddonModChatHelperProvider, private userProvider: CoreUserProvider) {\n        this.courseId = navParams.get('courseId');\n        this.chatId = navParams.get('chatId');\n        this.groupId = navParams.get('groupId');\n        this.sessionStart = navParams.get('sessionStart');\n        this.sessionEnd = navParams.get('sessionEnd');\n        this.cmId = navParams.get('cmId');\n        this.currentUserId = sitesProvider.getCurrentSiteUserId();\n\n        this.fetchMessages();\n    }\n\n    /**\n     * Fetch session messages.\n     *\n     * @return Promise resolved when done.\n     */\n    protected fetchMessages(): Promise<any> {\n        return this.chatProvider.getSessionMessages(this.chatId, this.sessionStart, this.sessionEnd, this.groupId)\n                .then((messages) => {\n            return this.chatProvider.getMessagesUserData(messages, this.courseId).then((messages) => {\n                this.messages = <AddonModChatSessionMessageForView[]> messages;\n\n                if (messages.length) {\n                    // Calculate which messages need to display the date or user data.\n                    for (let index = 0 ; index < this.messages.length; index++) {\n                        const message = this.messages[index];\n                        const prevMessage = index > 0 ? this.messages[index - 1] : null;\n\n                        this.chatHelper.formatMessage(this.currentUserId, message, prevMessage);\n\n                        if (message.beep && message.beep != this.currentUserId + '') {\n                            this.getUserFullname(message.beep).then((fullname) => {\n                                message.beepWho = fullname;\n                            });\n                        }\n                    }\n\n                    this.messages[this.messages.length - 1].showTail = true;\n                }\n            });\n        }).catch((error) => {\n            this.domUtils.showErrorModalDefault(error, 'core.errorloadingcontent', true);\n        }).finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Get the user fullname for a beep.\n     *\n     * @param  id User Id before parsing.\n     * @return User fullname.\n     */\n    protected getUserFullname(id: string): Promise<string> {\n        if (isNaN(parseInt(id, 10))) {\n            return Promise.resolve(id);\n        }\n\n        return this.userProvider.getProfile(parseInt(id, 10), this.courseId, true).then((user) => {\n            return user.fullname;\n        }).catch(() => {\n            // Error getting profile.\n            return  id;\n        });\n    }\n\n    /**\n     * Refresh session messages.\n     *\n     * @param refresher Refresher.\n     */\n    refreshMessages(refresher: any): void {\n        this.chatProvider.invalidateSessionMessages(this.chatId, this.sessionStart, this.groupId).finally(() => {\n            this.fetchMessages().finally(() => {\n                refresher.complete();\n            });\n        });\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/chat/pages/session-messages/session-messages.ts"],"sourceRoot":""}