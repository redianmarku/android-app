{"version":3,"sources":["../../src/addon/messages/pages/index/index.module.ts","../../src/addon/messages/components/components.module.ts","../../src/addon/messages/components/discussions/discussions.ts","../../src/addon/messages/components/confirmed-contacts/confirmed-contacts.ts","../../src/addon/messages/components/contact-requests/contact-requests.ts","../../src/addon/messages/components/contacts/contacts.ts","../../src/addon/messages/pages/index/index.ts"],"names":[],"mappings":"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","file":"2.js","sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AddonMessagesIndexPage } from './index';\nimport { CoreComponentsModule } from '@components/components.module';\nimport { CoreDirectivesModule } from '@directives/directives.module';\nimport { AddonMessagesComponentsModule } from '../../components/components.module';\n\n@NgModule({\n    declarations: [\n        AddonMessagesIndexPage,\n    ],\n    imports: [\n        CoreComponentsModule,\n        CoreDirectivesModule,\n        AddonMessagesComponentsModule,\n        IonicPageModule.forChild(AddonMessagesIndexPage),\n        TranslateModule.forChild()\n    ],\n})\nexport class AddonMessagesIndexPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/pages/index/index.module.ts","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from 'ionic-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CoreComponentsModule } from '@components/components.module';\nimport { CoreDirectivesModule } from '@directives/directives.module';\nimport { CorePipesModule } from '@pipes/pipes.module';\nimport { CoreSearchComponentsModule } from '@core/search/components/components.module';\nimport { AddonMessagesDiscussionsComponent } from '../components/discussions/discussions';\nimport { AddonMessagesConfirmedContactsComponent } from '../components/confirmed-contacts/confirmed-contacts';\nimport { AddonMessagesContactRequestsComponent } from '../components/contact-requests/contact-requests';\nimport { AddonMessagesContactsComponent } from '../components/contacts/contacts';\n\n@NgModule({\n    declarations: [\n        AddonMessagesDiscussionsComponent,\n        AddonMessagesConfirmedContactsComponent,\n        AddonMessagesContactRequestsComponent,\n        AddonMessagesContactsComponent\n    ],\n    imports: [\n        CommonModule,\n        IonicModule,\n        TranslateModule.forChild(),\n        CoreComponentsModule,\n        CoreDirectivesModule,\n        CorePipesModule,\n        CoreSearchComponentsModule,\n    ],\n    providers: [\n    ],\n    exports: [\n        AddonMessagesDiscussionsComponent,\n        AddonMessagesConfirmedContactsComponent,\n        AddonMessagesContactRequestsComponent,\n        AddonMessagesContactsComponent\n    ]\n})\nexport class AddonMessagesComponentsModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/components/components.module.ts","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy } from '@angular/core';\nimport { Platform, NavParams } from 'ionic-angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CoreEventsProvider } from '@providers/events';\nimport { CoreSitesProvider } from '@providers/sites';\nimport { AddonMessagesProvider } from '../../providers/messages';\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\nimport { CoreUtilsProvider } from '@providers/utils/utils';\nimport { CoreAppProvider } from '@providers/app';\nimport { CorePushNotificationsDelegate } from '@core/pushnotifications/providers/delegate';\n\n/**\n * Component that displays the list of discussions.\n */\n@Component({\n    selector: 'addon-messages-discussions',\n    templateUrl: 'addon-messages-discussions.html',\n})\nexport class AddonMessagesDiscussionsComponent implements OnDestroy {\n    protected newMessagesObserver: any;\n    protected readChangedObserver: any;\n    protected cronObserver: any;\n    protected appResumeSubscription: any;\n    protected loadingMessages: string;\n    protected siteId: string;\n\n    loaded = false;\n    loadingMessage: string;\n    discussions: any;\n    discussionUserId: number;\n    pushObserver: any;\n    search = {\n        enabled: false,\n        showResults: false,\n        results: [],\n        loading: '',\n        text: ''\n    };\n\n    constructor(private eventsProvider: CoreEventsProvider, sitesProvider: CoreSitesProvider, translate: TranslateService,\n            private messagesProvider: AddonMessagesProvider, private domUtils: CoreDomUtilsProvider, navParams: NavParams,\n            private appProvider: CoreAppProvider, platform: Platform, private utils: CoreUtilsProvider,\n            pushNotificationsDelegate: CorePushNotificationsDelegate) {\n\n        this.search.loading =  translate.instant('core.searching');\n        this.loadingMessages = translate.instant('core.loading');\n        this.siteId = sitesProvider.getCurrentSiteId();\n\n        // Update discussions when new message is received.\n        this.newMessagesObserver = eventsProvider.on(AddonMessagesProvider.NEW_MESSAGE_EVENT, (data) => {\n            if (data.userId && this.discussions) {\n                const discussion = this.discussions.find((disc) => {\n                    return disc.message.user == data.userId;\n                });\n\n                if (typeof discussion == 'undefined') {\n                    this.loaded = false;\n                    this.refreshData().finally(() => {\n                        this.loaded = true;\n                    });\n                } else {\n                    // An existing discussion has a new message, update the last message.\n                    discussion.message.message = data.message;\n                    discussion.message.timecreated = data.timecreated;\n                }\n            }\n        }, this.siteId);\n\n        // Update discussions when a message is read.\n        this.readChangedObserver = eventsProvider.on(AddonMessagesProvider.READ_CHANGED_EVENT, (data) => {\n            if (data.userId && this.discussions) {\n                const discussion = this.discussions.find((disc) => {\n                    return disc.message.user == data.userId;\n                });\n\n                if (typeof discussion != 'undefined') {\n                    // A discussion has been read reset counter.\n                    discussion.unread = false;\n\n                    // Conversations changed, invalidate them and refresh unread counts.\n                    this.messagesProvider.invalidateConversations(this.siteId);\n                    this.messagesProvider.refreshUnreadConversationCounts(this.siteId);\n                }\n            }\n        }, this.siteId);\n\n        // Refresh the view when the app is resumed.\n        this.appResumeSubscription = platform.resume.subscribe(() => {\n            if (!this.loaded) {\n                return;\n            }\n            this.loaded = false;\n            this.refreshData();\n        });\n\n        this.discussionUserId = navParams.get('discussionUserId') || false;\n\n        // If a message push notification is received, refresh the view.\n        this.pushObserver = pushNotificationsDelegate.on('receive').subscribe((notification) => {\n            // New message received. If it's from current site, refresh the data.\n            if (utils.isFalseOrZero(notification.notif) && notification.site == this.siteId) {\n                // Don't refresh unread counts, it's refreshed from the main menu handler in this case.\n                this.refreshData(null, false);\n            }\n        });\n    }\n\n    /**\n     * Component loaded.\n     */\n    ngOnInit(): void {\n        if (this.discussionUserId) {\n            // There is a discussion to load, open the discussion in a new state.\n            this.gotoDiscussion(this.discussionUserId);\n        }\n\n        this.fetchData().then(() => {\n            if (!this.discussionUserId && this.discussions.length > 0) {\n                // Take first and load it.\n                this.gotoDiscussion(this.discussions[0].message.user, undefined, true);\n            }\n        });\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @param refreshUnreadCounts Whteher to refresh unread counts.\n     * @return Promise resolved when done.\n     */\n    refreshData(refresher?: any, refreshUnreadCounts: boolean = true): Promise<any> {\n        const promises = [];\n        promises.push(this.messagesProvider.invalidateDiscussionsCache(this.siteId));\n\n        if (refreshUnreadCounts) {\n            promises.push(this.messagesProvider.invalidateUnreadConversationCounts(this.siteId));\n        }\n\n        return this.utils.allPromises(promises).finally(() => {\n            return this.fetchData().finally(() => {\n                if (refresher) {\n                    refresher.complete();\n                }\n            });\n        });\n    }\n\n    /**\n     * Fetch discussions.\n     *\n     * @return Promise resolved when done.\n     */\n    protected fetchData(): Promise<any> {\n        this.loadingMessage = this.loadingMessages;\n        this.search.enabled = this.messagesProvider.isSearchMessagesEnabled();\n\n        const promises = [];\n\n        promises.push(this.messagesProvider.getDiscussions(this.siteId).then((discussions) => {\n            // Convert to an array for sorting.\n            const discussionsSorted = [];\n            for (const userId in discussions) {\n                discussions[userId].unread = !!discussions[userId].unread;\n                discussionsSorted.push(discussions[userId]);\n            }\n\n            this.discussions = discussionsSorted.sort((a, b) => {\n                return b.message.timecreated - a.message.timecreated;\n            });\n        }));\n\n        promises.push(this.messagesProvider.getUnreadConversationCounts(this.siteId));\n\n        return Promise.all(promises).catch((error) => {\n            this.domUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n        }).finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Clear search and show discussions again.\n     */\n    clearSearch(): void {\n        this.loaded = false;\n        this.search.showResults = false;\n        this.search.text = ''; // Reset searched string.\n        this.fetchData().finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Search messages cotaining text.\n     *\n     * @param query Text to search for.\n     * @return Resolved when done.\n     */\n    searchMessage(query: string): Promise<any> {\n        this.appProvider.closeKeyboard();\n        this.loaded = false;\n        this.loadingMessage = this.search.loading;\n\n        return this.messagesProvider.searchMessages(query, undefined, undefined, undefined, this.siteId).then((searchResults) => {\n            this.search.showResults = true;\n            this.search.results = searchResults.messages;\n        }).catch((error) => {\n            this.domUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingmessages', true);\n        }).finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Navigate to a particular discussion.\n     *\n     * @param discussionUserId Discussion Id to load.\n     * @param messageId Message to scroll after loading the discussion. Used when searching.\n     * @param onlyWithSplitView Only go to Discussion if split view is on.\n     */\n    gotoDiscussion(discussionUserId: number, messageId?: number, onlyWithSplitView: boolean = false): void {\n        this.discussionUserId = discussionUserId;\n\n        const params = {\n            discussion: discussionUserId,\n            onlyWithSplitView: onlyWithSplitView\n        };\n        if (messageId) {\n            params['message'] = messageId;\n        }\n        this.eventsProvider.trigger(AddonMessagesProvider.SPLIT_VIEW_LOAD_EVENT, params, this.siteId);\n    }\n\n    /**\n     * Component destroyed.\n     */\n    ngOnDestroy(): void {\n        this.newMessagesObserver && this.newMessagesObserver.off();\n        this.readChangedObserver && this.readChangedObserver.off();\n        this.cronObserver && this.cronObserver.off();\n        this.appResumeSubscription && this.appResumeSubscription.unsubscribe();\n        this.pushObserver && this.pushObserver.unsubscribe();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/components/discussions/discussions.ts","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { Content } from 'ionic-angular';\nimport { CoreEventsProvider } from '@providers/events';\nimport { CoreSitesProvider } from '@providers/sites';\nimport { AddonMessagesProvider, AddonMessagesConversationMember } from '../../providers/messages';\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\n\n/**\n * Component that displays the list of confirmed contacts.\n */\n@Component({\n    selector: 'addon-messages-confirmed-contacts',\n    templateUrl: 'addon-messages-confirmed-contacts.html',\n})\nexport class AddonMessagesConfirmedContactsComponent implements OnInit, OnDestroy {\n    @Output() onUserSelected = new EventEmitter<{userId: number, onInit?: boolean}>();\n    @ViewChild(Content) content: Content;\n\n    loaded = false;\n    canLoadMore = false;\n    loadMoreError = false;\n    contacts: AddonMessagesConversationMember[] = [];\n    selectedUserId: number;\n\n    protected memberInfoObserver;\n\n    constructor(private domUtils: CoreDomUtilsProvider, eventsProvider: CoreEventsProvider, sitesProvider: CoreSitesProvider,\n            private messagesProvider: AddonMessagesProvider) {\n\n        this.onUserSelected = new EventEmitter();\n\n        // Update block status of a user.\n        this.memberInfoObserver = eventsProvider.on(AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT, (data) => {\n            if (data.userBlocked || data.userUnblocked) {\n                const user = this.contacts.find((user) => user.id == data.userId);\n                if (user) {\n                    user.isblocked = data.userBlocked;\n                }\n            } else if (data.contactRemoved) {\n                const index = this.contacts.findIndex((contact) => contact.id == data.userId);\n                if (index >= 0) {\n                    this.contacts.splice(index, 1);\n                }\n            } else if (data.contactRequestConfirmed) {\n                this.refreshData();\n            }\n        }, sitesProvider.getCurrentSiteId());\n    }\n\n    /**\n     * Component loaded.\n     */\n    ngOnInit(): void {\n        this.fetchData().then(() => {\n            if (this.contacts.length) {\n                this.selectUser(this.contacts[0].id, true);\n            }\n        }).finally(() => {\n            this.loaded = true;\n        });\n\n        // Workaround for infinite scrolling.\n        this.content.resize();\n    }\n\n    /**\n     * Fetch contacts.\n     *\n     * @param refresh True if we are refreshing contacts, false if we are loading more.\n     * @return Promise resolved when done.\n     */\n    fetchData(refresh: boolean = false): Promise<any> {\n        this.loadMoreError = false;\n\n        const limitFrom = refresh ? 0 : this.contacts.length;\n        let promise;\n\n        if (limitFrom === 0) {\n            // Always try to get latest data from server.\n            promise = this.messagesProvider.invalidateUserContacts().catch(() => {\n                // Shouldn't happen.\n            });\n        } else {\n            promise = Promise.resolve();\n        }\n\n        return promise.then(() => {\n            return this.messagesProvider.getUserContacts(limitFrom);\n        }).then((result) => {\n            this.contacts = refresh ? result.contacts : this.contacts.concat(result.contacts);\n            this.canLoadMore = result.canLoadMore;\n        }).catch((error) => {\n            this.loadMoreError = true;\n            this.domUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        });\n    }\n\n    /**\n     * Refresh contacts.\n     *\n     * @param refresher Refresher.\n     * @return Promise resolved when done.\n     */\n    refreshData(refresher?: any): Promise<any> {\n        // No need to invalidate contacts, we always try to get the latest.\n        return this.fetchData(true).finally(() => {\n            refresher && refresher.complete();\n        });\n    }\n\n    /**\n     * Load more contacts.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @return Resolved when done.\n     */\n    loadMore(infiniteComplete?: any): Promise<any> {\n        return this.fetchData().finally(() => {\n            infiniteComplete && infiniteComplete();\n        });\n    }\n\n    /**\n     * Notify that a contact has been selected.\n     *\n     * @param userId User id.\n     * @param onInit Whether the contact is selected on initial load.\n     */\n    selectUser(userId: number, onInit: boolean = false): void {\n        this.selectedUserId = userId;\n        this.onUserSelected.emit({userId, onInit});\n    }\n\n    /**\n     * Component destroyed.\n     */\n    ngOnDestroy(): void {\n        this.memberInfoObserver && this.memberInfoObserver.off();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/components/confirmed-contacts/confirmed-contacts.ts","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { Content } from 'ionic-angular';\nimport { CoreEventsProvider } from '@providers/events';\nimport { CoreSitesProvider } from '@providers/sites';\nimport { AddonMessagesProvider, AddonMessagesConversationMember } from '../../providers/messages';\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\n\n/**\n * Component that displays the list of contact requests.\n */\n@Component({\n    selector: 'addon-messages-contact-requests',\n    templateUrl: 'addon-messages-contact-requests.html',\n})\nexport class AddonMessagesContactRequestsComponent implements OnInit, OnDestroy {\n    @Output() onUserSelected = new EventEmitter<{userId: number, onInit?: boolean}>();\n    @ViewChild(Content) content: Content;\n\n    loaded = false;\n    canLoadMore = false;\n    loadMoreError = false;\n    requests: AddonMessagesConversationMember[] = [];\n    selectedUserId: number;\n\n    protected memberInfoObserver;\n\n    constructor(private domUtils: CoreDomUtilsProvider, eventsProvider: CoreEventsProvider, sitesProvider: CoreSitesProvider,\n            private messagesProvider: AddonMessagesProvider) {\n\n        // Hide the \"Would like to contact you\" message when a contact request is confirmed.\n        this.memberInfoObserver = eventsProvider.on(AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT, (data) => {\n            if (data.contactRequestConfirmed || data.contactRequestDeclined) {\n                const index = this.requests.findIndex((request) => request.id == data.userId);\n                if (index >= 0) {\n                    this.requests.splice(index, 1);\n                }\n            }\n        }, sitesProvider.getCurrentSiteId());\n    }\n\n    /**\n     * Component loaded.\n     */\n    ngOnInit(): void {\n        this.fetchData().then(() => {\n            if (this.requests.length) {\n                this.selectUser(this.requests[0].id, true);\n            }\n        }).finally(() => {\n            this.loaded = true;\n        });\n\n        // Workaround for infinite scrolling.\n        this.content.resize();\n    }\n\n    /**\n     * Fetch contact requests.\n     *\n     * @param refresh True if we are refreshing contact requests, false if we are loading more.\n     * @return Promise resolved when done.\n     */\n    fetchData(refresh: boolean = false): Promise<any> {\n        this.loadMoreError = false;\n\n        const limitFrom = refresh ? 0 : this.requests.length;\n        let promise;\n\n        if (limitFrom === 0) {\n            // Always try to get latest data from server.\n            promise = this.messagesProvider.invalidateContactRequestsCache().catch(() => {\n                // Shouldn't happen.\n            });\n        } else {\n            promise = Promise.resolve();\n        }\n\n        return promise.then(() => {\n            return this.messagesProvider.getContactRequests(limitFrom);\n        }).then((result) => {\n            this.requests = refresh ? result.requests : this.requests.concat(result.requests);\n            this.canLoadMore = result.canLoadMore;\n        }).catch((error) => {\n            this.loadMoreError = true;\n            this.domUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        });\n    }\n\n    /**\n     * Refresh contact requests.\n     *\n     * @param refresher Refresher.\n     * @return Promise resolved when done.\n     */\n    refreshData(refresher?: any): Promise<any> {\n        // Refresh the number of contacts requests to update badges.\n        this.messagesProvider.refreshContactRequestsCount();\n\n        // No need to invalidate contact requests, we always try to get the latest.\n        return this.fetchData(true).finally(() => {\n            refresher && refresher.complete();\n        });\n    }\n\n    /**\n     * Load more contact requests.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @return Resolved when done.\n     */\n    loadMore(infiniteComplete?: any): Promise<any> {\n        return this.fetchData().finally(() => {\n            infiniteComplete && infiniteComplete();\n        });\n    }\n\n    /**\n     * Notify that a contact has been selected.\n     *\n     * @param userId User id.\n     * @param onInit Whether the contact is selected on initial load.\n     */\n    selectUser(userId: number, onInit: boolean = false): void {\n        this.selectedUserId = userId;\n        this.onUserSelected.emit({userId, onInit});\n    }\n\n    /**\n     * Component destroyed.\n     */\n    ngOnDestroy(): void {\n        this.memberInfoObserver && this.memberInfoObserver.off();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/components/contact-requests/contact-requests.ts","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component } from '@angular/core';\nimport { NavParams } from 'ionic-angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CoreSitesProvider } from '@providers/sites';\nimport {\n    AddonMessagesProvider, AddonMessagesGetContactsResult, AddonMessagesSearchContactsContact\n} from '../../providers/messages';\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\nimport { CoreAppProvider } from '@providers/app';\nimport { CoreEventsProvider } from '@providers/events';\n\n/**\n * Component that displays the list of contacts.\n */\n@Component({\n    selector: 'addon-messages-contacts',\n    templateUrl: 'addon-messages-contacts.html',\n})\nexport class AddonMessagesContactsComponent {\n\n    protected currentUserId: number;\n    protected searchingMessages: string;\n    protected loadingMessages: string;\n    protected siteId: string;\n    protected noSearchTypes = ['online', 'offline', 'blocked', 'strangers'];\n\n    loaded = false;\n    discussionUserId: number;\n    contactTypes = this.noSearchTypes;\n    searchType = 'search';\n    loadingMessage = '';\n    hasContacts = false;\n    contacts: AddonMessagesGetContactsFormatted = {\n        online: [],\n        offline: [],\n        strangers: [],\n        search: []\n    };\n    searchString = '';\n\n    protected memberInfoObserver;\n\n    constructor(sitesProvider: CoreSitesProvider, translate: TranslateService, private appProvider: CoreAppProvider,\n            private messagesProvider: AddonMessagesProvider, private domUtils: CoreDomUtilsProvider, navParams: NavParams,\n            private eventsProvider: CoreEventsProvider) {\n\n        this.currentUserId = sitesProvider.getCurrentSiteUserId();\n        this.siteId = sitesProvider.getCurrentSiteId();\n        this.searchingMessages = translate.instant('core.searching');\n        this.loadingMessages = translate.instant('core.loading');\n        this.loadingMessage = this.loadingMessages;\n\n        this.discussionUserId = navParams.get('discussionUserId') || false;\n\n        // Refresh the list when a contact request is confirmed.\n        this.memberInfoObserver = eventsProvider.on(AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT, (data) => {\n            if (data.contactRequestConfirmed) {\n                this.refreshData();\n            }\n        }, sitesProvider.getCurrentSiteId());\n    }\n\n    /**\n     * Component loaded.\n     */\n    ngOnInit(): void {\n        if (this.discussionUserId) {\n            // There is a discussion to load, open the discussion in a new state.\n            this.gotoDiscussion(this.discussionUserId);\n        }\n\n        this.fetchData().then(() => {\n            if (!this.discussionUserId && this.hasContacts) {\n                let contact;\n                for (const x in this.contacts) {\n                    if (this.contacts[x].length > 0) {\n                        contact = this.contacts[x][0];\n                        break;\n                    }\n                }\n\n                if (contact) {\n                    // Take first and load it.\n                    this.gotoDiscussion(contact.id, true);\n                }\n            }\n        }).finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @return Promise resolved when done.\n     */\n    refreshData(refresher?: any): Promise<any> {\n        let promise;\n\n        if (this.searchString) {\n            // User has searched, update the search.\n            promise = this.performSearch(this.searchString);\n        } else {\n            // Update contacts.\n            promise = this.messagesProvider.invalidateAllContactsCache(this.currentUserId).then(() => {\n                return this.fetchData();\n            });\n        }\n\n        return promise.finally(() => {\n            refresher.complete();\n        });\n    }\n\n    /**\n     * Fetch contacts.\n     *\n     * @return Promise resolved when done.\n     */\n    protected fetchData(): Promise<any> {\n        this.loadingMessage = this.loadingMessages;\n\n        return this.messagesProvider.getAllContacts().then((contacts) => {\n            for (const x in contacts) {\n                if (contacts[x].length > 0) {\n                    this.contacts[x] = this.sortUsers(contacts[x]);\n                } else {\n                    this.contacts[x] = [];\n                }\n            }\n\n            this.clearSearch();\n        }).catch((error) => {\n            this.domUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        });\n    }\n\n    /**\n     * Sort user list by fullname\n     * @param list List to sort.\n     * @return Sorted list.\n     */\n    protected sortUsers(list: any[]): any[] {\n        return list.sort((a, b) => {\n            const compareA = a.fullname.toLowerCase(),\n                compareB = b.fullname.toLowerCase();\n\n            return compareA.localeCompare(compareB);\n        });\n    }\n\n    /**\n     * Clear search and show all contacts again.\n     */\n    clearSearch(): void {\n        this.searchString = ''; // Reset searched string.\n        this.contactTypes = this.noSearchTypes;\n\n        this.hasContacts = false;\n        for (const x in this.contacts) {\n            if (this.contacts[x].length > 0) {\n                this.hasContacts = true;\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Search users from the UI.\n     *\n     * @param query Text to search for.\n     * @return Resolved when done.\n     */\n    search(query: string): Promise<any> {\n        this.appProvider.closeKeyboard();\n\n        this.loaded = false;\n        this.loadingMessage = this.searchingMessages;\n\n        return this.performSearch(query).finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Perform the search of users.\n     *\n     * @param query Text to search for.\n     * @return Resolved when done.\n     */\n    protected performSearch(query: string): Promise<any> {\n        return this.messagesProvider.searchContacts(query).then((result) => {\n            this.hasContacts = result.length > 0;\n            this.searchString = query;\n            this.contactTypes = ['search'];\n\n            this.contacts.search = this.sortUsers(result);\n        }).catch((error) => {\n            this.domUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        });\n    }\n\n    /**\n     * Navigate to a particular discussion.\n     *\n     * @param discussionUserId Discussion Id to load.\n     * @param onlyWithSplitView Only go to Discussion if split view is on.\n     */\n    gotoDiscussion(discussionUserId: number, onlyWithSplitView: boolean = false): void {\n        this.discussionUserId = discussionUserId;\n\n        const params = {\n            discussion: discussionUserId,\n            onlyWithSplitView: onlyWithSplitView\n        };\n        this.eventsProvider.trigger(AddonMessagesProvider.SPLIT_VIEW_LOAD_EVENT, params, this.siteId);\n    }\n\n    /**\n     * Component destroyed.\n     */\n    ngOnDestroy(): void {\n        this.memberInfoObserver && this.memberInfoObserver.off();\n    }\n}\n\n/**\n * Contacts with some calculated data.\n */\nexport type AddonMessagesGetContactsFormatted = AddonMessagesGetContactsResult & {\n    search?: AddonMessagesSearchContactsContact[]; // Calculated in the app. Result of searching users.\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/components/contacts/contacts.ts","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, ViewChild } from '@angular/core';\nimport { IonicPage } from 'ionic-angular';\nimport { CoreEventsProvider } from '@providers/events';\nimport { CoreSitesProvider } from '@providers/sites';\nimport { AddonMessagesProvider } from '../../providers/messages';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreTabsComponent } from '@components/tabs/tabs';\n\n/**\n * Page that displays the messages index page.\n */\n@IonicPage({ segment: 'addon-messages-index' })\n@Component({\n    selector: 'page-addon-messages-index',\n    templateUrl: 'index.html',\n})\nexport class AddonMessagesIndexPage implements OnDestroy {\n    @ViewChild(CoreSplitViewComponent) splitviewCtrl: CoreSplitViewComponent;\n    @ViewChild(CoreTabsComponent) tabsComponent: CoreTabsComponent;\n\n    protected loadSplitViewObserver: any;\n    protected siteId: string;\n\n    constructor(eventsProvider: CoreEventsProvider, sitesProvider: CoreSitesProvider) {\n\n        this.siteId = sitesProvider.getCurrentSiteId();\n\n        // Update split view or navigate.\n        this.loadSplitViewObserver = eventsProvider.on(AddonMessagesProvider.SPLIT_VIEW_LOAD_EVENT, (data) => {\n            if (data.discussion && (this.splitviewCtrl.isOn() || !data.onlyWithSplitView)) {\n                this.gotoDiscussion(data.discussion, data.message);\n            }\n        }, this.siteId);\n    }\n\n    /**\n     * Navigate to a particular discussion.\n     *\n     * @param discussionUserId Discussion Id to load.\n     * @param messageId Message to scroll after loading the discussion. Used when searching.\n     */\n    gotoDiscussion(discussionUserId: number, messageId?: number): void {\n        const params = {\n            userId: discussionUserId\n        };\n        if (messageId) {\n            params['message'] = messageId;\n        }\n        this.splitviewCtrl.push('AddonMessagesDiscussionPage', params);\n    }\n\n    /**\n     * User entered the page.\n     */\n    ionViewDidEnter(): void {\n        this.tabsComponent && this.tabsComponent.ionViewDidEnter();\n    }\n\n    /**\n     * User left the page.\n     */\n    ionViewDidLeave(): void {\n        this.tabsComponent && this.tabsComponent.ionViewDidLeave();\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        this.loadSplitViewObserver && this.loadSplitViewObserver.off();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/messages/pages/index/index.ts"],"sourceRoot":""}