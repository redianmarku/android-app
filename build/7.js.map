{"version":3,"sources":["../../src/addon/mod/quiz/pages/player/player.module.ts","../../src/addon/mod/quiz/pages/player/player.ts","../../src/addon/mod/quiz/classes/auto-save.ts"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;;;;AAEQ;AACO;AACM;AACe;AACA;AACsB;AACzC;AAclD;IAAA;IAA2C,CAAC;IAA/B,4BAA4B;QAZxC,uEAAQ,CAAC;YACN,YAAY,EAAE;gBACV,uEAAsB;aACzB;YACD,OAAO,EAAE;gBACL,2FAAoB;gBACpB,2FAAoB;gBACpB,iHAA4B;gBAC5B,sEAAe,CAAC,QAAQ,CAAC,uEAAsB,CAAC;gBAChD,4EAAe,CAAC,QAAQ,EAAE;aAC7B;SACJ,CAAC;OACW,4BAA4B,CAAG;IAAD,mCAAC;CAAA;AAAH;;;;;;;;;AClCzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE+F;AACnB;AACtD;AACA;AACA;AACF;AACF;AACS;AACE;AACe;AACO;AACjB;AACP;AACS;AACD;AACL;AAG/D;;GAEG;AAMH;IAsCI,gCAAY,SAAoB,EAAE,MAA0B,EAAY,SAA2B,EACjF,cAAkC,EAAY,aAAgC,EAC9E,YAA8B,EAAY,QAA8B,EAAE,WAA8B,EACxG,SAAgC,EAAY,YAAkC,EAC9E,UAAsC,EAAY,QAAkC,EACpF,cAA0C,EAAY,GAAsB,EACtF,SAA0B,EAAY,OAAsB,EAAa,KAAsB;QAN/B,cAAS,GAAT,SAAS,CAAkB;QACjF,mBAAc,GAAd,cAAc,CAAoB;QAAY,kBAAa,GAAb,aAAa,CAAmB;QAC9E,iBAAY,GAAZ,YAAY,CAAkB;QAAY,aAAQ,GAAR,QAAQ,CAAsB;QACxE,cAAS,GAAT,SAAS,CAAuB;QAAY,iBAAY,GAAZ,YAAY,CAAsB;QAC9E,eAAU,GAAV,UAAU,CAA4B;QAAY,aAAQ,GAAR,QAAQ,CAA0B;QACpF,mBAAc,GAAd,cAAc,CAA4B;QAAY,QAAG,GAAH,GAAG,CAAmB;QAChD,YAAO,GAAP,OAAO,CAAe;QAAa,UAAK,GAAL,KAAK,CAAiB;QApCvG,cAAS,GAAG,8EAAoB,CAAC,SAAS,CAAC,CAAC,kCAAkC;QAkBpE,kBAAa,GAAQ,EAAE,CAAC,CAAC,sCAAsC;QAS/D,eAAU,GAAG,KAAK,CAAC,CAAC,0DAA0D;QAC9E,oBAAe,GAAG,KAAK,CAAC,CAAC,gFAAgF;QAU/G,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC1C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAE5C,yCAAyC;QACzC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,8EAAoB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAE9E,iCAAiC;QACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,iFAAoB,CAAC,4BAA4B,EAAE,yCAAyC,EACxG,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;QAE3D,+BAA+B;QAC/B,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC,MAAM,CAAC,iCAAiC,EAAE;YACvE,IAAI,EAAE,IAAI;SACb,EAAE,EAAE,QAAQ,EAAE,oBAAoB;YAC/B,YAAY,EAAE,IAAI;YAClB,qBAAqB,EAAE,IAAI;YAC3B,cAAc,EAAE,+BAA+B;YAC/C,cAAc,EAAE,+BAA+B,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED;;OAEG;IACH,yCAAQ,GAAR;QAAA,iBASC;QARG,4CAA4C;QAC5C,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,kCAAkC;QAClC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,UAAC,KAAK;YACrE,KAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC3B,KAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,4CAAW,GAAX;QACI,kBAAkB;QAClB,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,CAAC,uBAAuB,EAAE,CAAC;QACxC,IAAI,CAAC,yBAAyB,IAAI,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC;QAE/E,wCAAwC;QACxC,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,8EAAoB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACpF,CAAC;IAED;;;;OAIG;IACG,gDAAe,GAArB;;;;;;wBACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;4BAClB,MAAM,gBAAC;wBACX,CAAC;6BAEG,KAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,GAA5D,wBAA4D;wBAEtD,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;;;;wBAG/D,qBAAM,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC;;wBAAvC,SAAuC,CAAC;;;;wBAExC,0CAA0C;wBAC1C,KAAK,CAAC,OAAO,EAAE,CAAC;wBAEhB,qBAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,wCAAwC,CAAC,CAAC;;wBAAjG,SAAiG,CAAC;wBAElG,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,CAAC;;;wBAEjG,KAAK,CAAC,OAAO,EAAE,CAAC;;;;;;KAG3B;IAED;;OAEG;IACH,iDAAgB,GAAhB;QACI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,0CAAS,GAAT;QACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,uDAAsB,GAAtB,UAAuB,MAAW;QAAlC,iBAkCC;QAjCG,+CAA+C;QAC/C,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC;YACtE,IAAM,KAAK,GAAG,KAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;YAEnE,mBAAmB;YACnB,MAAM,CAAC,KAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,UAAC,OAAO;gBAEtC,+BAA+B;gBAC/B,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;gBAEpC,yCAAyC;gBACzC,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAI,CAAC,IAAI,EAAE,KAAI,CAAC,OAAO,EAAE,OAAO,EAAE,KAAI,CAAC,aAAa,CAAC,CAAC;YAClG,CAAC,CAAC,CAAC,IAAI,CAAC;gBACJ,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC,sDAAsD;gBAEnF,2BAA2B;gBAC3B,IAAM,aAAa,GAAG,KAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,EACjD,SAAS,GAAG,aAAa,CAAC,SAAS,IAAI,CAAC,EACxC,UAAU,GAAG,aAAa,CAAC,UAAU,IAAI,CAAC,CAAC;gBAE/C,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,qCAAqC;gBAE9E,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC;oBACnD,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;oBACnB,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;gBAChE,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC,OAAO,CAAC;gBACP,KAAK,CAAC,OAAO,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;YACX,KAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,EAAE,0BAA0B,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IACH,2CAAU,GAAV,UAAW,IAAY,EAAE,SAAmB,EAAE,IAAa;QAA3D,iBA4DC;QA3DG,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,8EAAoB,CAAC,eAAe,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7G,oEAAoE;YACpE,MAAM,CAAC;QACX,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,OAAO,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC;YAC7F,gDAAgD;YAChD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAE5B,MAAM,CAAC;QACX,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxH,+DAA+D;YAC/D,iHAAiH;YACjH,MAAM,CAAC;QACX,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACzC,yBAAyB;YACzB,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAExC,uFAAuF;QACvF,IAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACzF,OAAO,CAAC,IAAI,CAAC;YACT,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACpB,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC,sDAAsD;YACvF,CAAC;YAED,6DAA6D;YAC7D,IAAI,UAAU,CAAC;YAEf,gDAAgD;YAChD,KAAI,CAAC,QAAQ,CAAC,uBAAuB,EAAE,CAAC;YAExC,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACd,UAAU,GAAG,KAAI,CAAC,WAAW,EAAE,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,UAAU,GAAG,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACrC,CAAC;YAED,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,UAAC,KAAK;gBAC1B,+DAA+D;gBAC/D,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC;oBACpB,KAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,KAAI,CAAC,IAAI,EAAE,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,aAAa,EAAE,KAAI,CAAC,OAAO,CAAC,CAAC;gBACtG,CAAC;gBAED,KAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,EAAE,kCAAkC,EAAE,IAAI,CAAC,CAAC;YACzF,CAAC,CAAC,CAAC;QACP,CAAC,EAAE,UAAC,KAAK;YACL,KAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,EAAE,iCAAiC,EAAE,IAAI,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC,OAAO,CAAC;YACP,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YAEnB,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC;gBAC7B,qEAAqE;gBACrE,UAAU,CAAC;oBACP,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBAChC,CAAC,EAAE,IAAI,CAAC,CAAC;YACb,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACO,0CAAS,GAAnB;QAAA,iBAwDC;QAvDG,qFAAqF;QACrF,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;YAC/C,mCAAmC;YACnC,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAI,CAAC,QAAQ,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;YACb,KAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;YACrB,KAAI,CAAC,IAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;YAE7E,EAAE,CAAC,CAAC,KAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC7C,yBAAyB;gBACzB,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,6FAA6F;gBAC7F,wEAAwE;gBACxE,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,8BAA8B,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;YACvE,CAAC;QACL,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,WAAW;YAChB,KAAI,CAAC,OAAO,GAAG,WAAW,CAAC;YAE3B,EAAE,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC1B,KAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACjF,CAAC;YAED,uCAAuC;YACvC,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,KAAI,CAAC,IAAI,CAAC,EAAE,EAAE,KAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;YACT,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAE3B,+CAA+C;YAC/C,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,eAAe,CAAC,KAAI,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,KAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;YACb,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;gBACnB,0CAA0C;gBAC1C,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YAC3B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAM,QAAQ,GAAG,EAAE,CAAC;gBAEpB,2DAA2D;gBAC3D,KAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACjD,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAE9E,4BAA4B;gBAC5B,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;oBAC5D,KAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBAC1B,KAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC;gBAClF,CAAC,CAAC,CAAC,CAAC;gBAEJ,6DAA6D;gBAC7D,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAEnE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACjC,CAAC;QACL,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;YACX,KAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,EAAE,6BAA6B,EAAE,IAAI,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IACH,8CAAa,GAAb,UAAc,UAAoB,EAAE,MAAgB;QAApD,iBAgCC;QA/BG,IAAI,OAAO,CAAC;QAEZ,kFAAkF;QAClF,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,8EAAoB,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC5E,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC;QAC/F,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;YAChB,IAAM,KAAK,GAAG,KAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;YAEnE,MAAM,CAAC,KAAI,CAAC,cAAc,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC;gBAChD,uDAAuD;gBACvD,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,8EAAoB,CAAC,sBAAsB,EAAE;oBACrE,MAAM,EAAE,KAAI,CAAC,MAAM;oBACnB,SAAS,EAAE,KAAI,CAAC,OAAO,CAAC,EAAE;oBAC1B,MAAM,EAAE,CAAC,KAAI,CAAC,OAAO;iBACxB,EAAE,KAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,CAAC;gBAE1C,KAAI,CAAC,cAAc,CAAC,OAAO,CAAC,6EAAkB,CAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;gBAEvF,oBAAoB;gBACpB,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;YACvB,CAAC,CAAC,CAAC,OAAO,CAAC;gBACP,KAAK,CAAC,OAAO,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;YACX,KAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,EAAE,iCAAiC,EAAE,IAAI,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACO,kDAAiB,GAA3B;QAAA,iBAgBC;QAfG,gEAAgE;QAChE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC;aACjH,IAAI,CAAC,UAAC,IAAI;YAEf,IAAM,iBAAiB,GAAG,EAAE,CAAC;YAE7B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;gBAC5B,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAI,CAAC,cAAc,CAAC,gCAAgC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC3G,CAAC,CAAC,CAAC;YAEH,oDAAoD;YACpD,KAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,UAAC,SAAS;gBACtC,SAAS,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACO,2CAAU,GAApB;QACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;IAChG,CAAC;IAED;;OAEG;IACO,0CAAS,GAAnB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;YACrC,4DAA4D;YAC5D,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,EAClF,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;YAClD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,IAAI,CAAC,OAAO,CAAC;YACxB,CAAC;QACL,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACO,yCAAQ,GAAlB,UAAmB,IAAY;QAA/B,iBAmCC;QAlCG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;YAC7G,4DAA4D;YAC5D,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YAC5B,KAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;YAEhC,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YAChC,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9B,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;YAC3D,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAEzB,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;gBAC5B,2CAA2C;gBAC3C,QAAQ,CAAC,YAAY,GAAG,KAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAE/E,iCAAiC;gBACjC,KAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBAE9D,+BAA+B;gBAC/B,QAAQ,CAAC,kBAAkB,GAAG,KAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC;gBAE3D,kFAAkF;gBAClF,EAAE,CAAC,CAAC,KAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAChD,QAAQ,CAAC,IAAI,GAAG,aAAa,CAAC;gBAClC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,6DAA6D;YAC7D,KAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAI,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,KAAI,CAAC,aAAa,EAAE,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;gBAC7G,iBAAiB;YACrB,CAAC,CAAC,CAAC;YAEH,6BAA6B;YAC7B,KAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,KAAI,CAAC,IAAI,EAAE,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,aAAa,EAAE,KAAI,CAAC,OAAO,CAAC,CAAC;QACtG,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACO,4CAAW,GAArB;QAAA,iBAkBC;QAjBG,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAE3B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,EAAE;YAC9G,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,KAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;YAE3B,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,OAAO,CAAC,KAAK,IAAI,8EAAoB,CAAC,mBAAmB,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,eAAe,CAAC;YACjH,KAAI,CAAC,qBAAqB,GAAG,KAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,KAAI,CAAC,gBAAgB,CAAC,CAAC;YAE/F,KAAI,CAAC,OAAO,CAAC,cAAc,GAAG,KAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,KAAI,CAAC,IAAI,EAAE,KAAI,CAAC,OAAO,CAAC,CAAC;YAElG,yBAAyB;YACzB,KAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,KAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAI,CAAC,aAAa,EAAE,KAAI,CAAC,MAAM,EAAE,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC;iBAChG,KAAK,CAAC,UAAC,KAAK;gBACjB,iBAAiB;YACrB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACO,+CAAc,GAAxB;QAAA,iBAWC;QAVG,4FAA4F;QAC5F,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC;aAChG,IAAI,CAAC,UAAC,SAAS;YAEpB,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;gBACvB,QAAQ,CAAC,UAAU,GAAG,KAAI,CAAC,cAAc,CAAC,qBAAqB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACpF,CAAC,CAAC,CAAC;YAEH,KAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACH,+CAAc,GAAd;QAAA,iBAoBC;QAnBG,IAAI,OAAO,CAAC;QAEZ,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACvB,gDAAgD;YAChD,IAAM,OAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YAE/C,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,KAAK,CAAC;gBAClC,iBAAiB;YACrB,CAAC,CAAC,CAAC,IAAI,CAAC;gBACJ,OAAK,CAAC,OAAO,EAAE,CAAC;gBAChB,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YACjC,CAAC,CAAC,CAAC;QACP,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;YACnB,KAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,kDAAkD;IACxC,+CAAc,GAAxB;QACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC/F,CAAC;IAED;;;;;;;OAOG;IACO,+CAAc,GAAxB,UAAyB,UAAoB,EAAE,MAAgB,EAAE,QAAkB;QAAnF,iBAiCC;QAhCG,2BAA2B;QAC3B,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,UAAC,OAAO;YACtC,oBAAoB;YACpB,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAI,CAAC,IAAI,EAAE,KAAI,CAAC,OAAO,EAAE,OAAO,EAAE,KAAI,CAAC,aAAa,EAAE,UAAU,EAAE,MAAM,EACxG,KAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;gBAE9B,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,IAAI,wCAAwC,CAAC,CAAC,CAAC;oBACvE,gEAAgE;oBAChE,MAAM,CAAC,KAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC;wBACjC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;4BACX,6FAA6F;4BAC7F,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBACjC,CAAC;wBAED,uDAAuD;wBACvD,MAAM,CAAC,KAAI,CAAC,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;oBACzD,CAAC,EAAE;wBACC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACjC,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,IAAI,CAAC;YACJ,mCAAmC;YACnC,KAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC;YAC/B,KAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC;YAElC,EAAE,CAAC,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACnB,KAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC,KAAI,CAAC,WAAW,EAAE,CAAC,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,CAAC;YACpH,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACO,iDAAgB,GAA1B,UAA2B,IAAY;QACnC,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC,IAAI,CAAC,OAAO,EAAE,2BAA2B,GAAG,IAAI,CAAC,CAAC;IAC9F,CAAC;IAED;;;;OAIG;IACH,oDAAmB,GAAnB,UAAoB,EAAS;QACzB,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,sCAAK,GAAL;QAAA,iBAmBC;QAlBG,IAAI,OAAO,CAAC;QACZ,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACtB,uDAAuD;YACvD,OAAO,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,cAAc;YACd,OAAO,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC;gBAC5B,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;gBAE3B,MAAM,CAAC,KAAI,CAAC,sBAAsB,EAAE,CAAC;YACzC,CAAC,CAAC,CAAC;QACP,CAAC;QAED,OAAO,CAAC,OAAO,CAAC;YACZ,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACO,uDAAsB,GAAhC;QAAA,iBA2BC;QA1BG,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;QAE/D,sDAAsD;QACtD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EACjH,KAAK,EAAE,6BAA6B,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO;YAEvD,qHAAqH;YACrH,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,2BAA2B,CAAC,KAAI,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,KAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;gBACzG,KAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;gBAEvB,MAAM,CAAC,KAAI,CAAC,cAAc,EAAE,CAAC;YACjC,CAAC,CAAC,CAAC,IAAI,CAAC;gBACJ,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,KAAK,IAAI,8EAAoB,CAAC,eAAe,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;oBAC9F,8DAA8D;oBAC9D,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;wBAChD,KAAI,CAAC,SAAS,EAAE,CAAC;oBACrB,CAAC,CAAC,CAAC;gBACP,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,2EAA2E;oBAC3E,MAAM,CAAC,KAAI,CAAC,WAAW,EAAE,CAAC;gBAC9B,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;YACX,KAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,EAAE,kCAAkC,EAAE,IAAI,CAAC,CAAC;QACzF,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,uCAAM,GAAN;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IApoBmB;QAAnB,yEAAS,CAAC,8DAAO,CAAC;kCAAU,8DAAO;2DAAC;IACA;QAApC,6EAAY,CAAC,2GAAqB,CAAC;kCAAqB,gEAAS;sEAAwB;IACnE;QAAtB,yEAAS,CAAC,UAAU,CAAC;kCAAc,iEAAU;+DAAC;IAHtC,sBAAsB;QAJlC,wEAAS,CAAC;YACP,QAAQ,EAAE,4BAA4B;WACZ;SAC7B,CAAC;sKAuCyB,CAA4E;YACjE,2EAAkB,kFAA4C;YAChE,oFAAsC,gFAAmC,CAAiB;YAC7F,sFAA+C,yFAAoB;YAClE,mGAA0B,EAAsB,yEAAwB;YACpE,4IAA2C,8EAAiB;YAC3E,eAAe,EAAqB,EAAgD;OA5C9F,sBAAsB,CAsoBlC;IAAD,CAAC;AAAA;SAtoBY,sBAAsB,G;;;;;;;;ACxCnC;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AAMsE;AAChE;AAEvC;;;GAGG;AACH;IAYI;;;;;;;;;OASG;IACH,8BAAsB,QAAgB,EAAY,cAAsB,EAAE,cAAkC,EAC1F,WAA8B,EAAY,cAA0C,EACpF,YAAkC;QAFpD,iBAcC;QAdqB,aAAQ,GAAR,QAAQ,CAAQ;QAAY,mBAAc,GAAd,cAAc,CAAQ;QACtD,gBAAW,GAAX,WAAW,CAAmB;QAAY,mBAAc,GAAd,cAAc,CAA4B;QACpF,iBAAY,GAAZ,YAAY,CAAsB;QAvB1C,2BAAsB,GAAG,IAAI,CAAC;QAO9B,iBAAY,GAAG,KAAK,CAAC,CAAC,gCAAgC;QAkB5D,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC;QAEjE,sBAAsB;QACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,2HAAoC,CAAC,CAAC;QAC7E,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;YACtB,KAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,wDAAwD;QACxD,IAAI,CAAC,eAAe,GAAG,IAAI,qDAAe,CAAU,KAAK,CAAC,CAAC;IAC/D,CAAC;IAED;;OAEG;IACH,6CAAc,GAAd;QACI,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACnC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;IACrC,CAAC;IAED;;;;;;;OAOG;IACH,2CAAY,GAAZ,UAAa,IAAS,EAAE,OAAY,EAAE,aAAkB,EAAE,OAAiB;QACvE,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACvB,kEAAkE;YAClE,MAAM,CAAC;QACX,CAAC;QAED,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAElC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACxB,0CAA0C;YAC1C,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;QACnC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,iCAAiC;YACjC,IAAI,KAAK,GAAG,IAAI,CAAC;YAEjB,GAAG,CAAC,CAAC,IAAM,MAAI,IAAI,OAAO,CAAC,CAAC,CAAC;gBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,MAAI,CAAC,IAAI,OAAO,CAAC,MAAI,CAAC,CAAC,CAAC,CAAC;oBAC9C,KAAK,GAAG,KAAK,CAAC;oBACd,KAAK,CAAC;gBACV,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACT,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;YACjE,CAAC;YAED,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;QACnC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACO,yCAAU,GAApB;QACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjF,CAAC;IAED;;OAEG;IACH,gDAAiB,GAAjB;QACI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACH,sCAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED;;;;;;;OAOG;IACH,+CAAgB,GAAhB,UAAiB,IAAS,EAAE,OAAY,EAAE,aAAkB,EAAE,OAAiB;QAA/E,iBA4BC;QA3BG,gEAAgE;QAChE,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;YAE5G,iBAAiB;YACjB,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;gBAC9B,IAAM,OAAO,GAAG,KAAI,CAAC,UAAU,EAAE,CAAC;gBAClC,KAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,KAAI,CAAC,eAAe,GAAG,OAAO,CAAC,CAAC,qEAAqE;gBAErG,KAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC;oBAC/E,qEAAqE;oBACrE,KAAI,CAAC,iBAAiB,EAAE,CAAC;gBAC7B,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;oBACX,qDAAqD;oBACrD,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;oBAEnD,yDAAyD;oBACzD,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBACnC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAChC,KAAI,CAAC,iBAAiB,EAAE,CAAC;oBAC7B,CAAC;oBAED,aAAa;oBACb,KAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;gBACjE,CAAC,CAAC,CAAC;YACP,CAAC,EAAE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;QACnC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,gDAAiB,GAAjB,UAAkB,EAAU;QACxB,8CAA8C;QAC9C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAEzB,6DAA6D;YAC7D,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;gBACjB,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;aACpE,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAED;;;;;;;OAOG;IACH,uDAAwB,GAAxB,UAAyB,IAAS,EAAE,OAAY,EAAE,aAAkB,EAAE,OAAiB;QAAvF,iBAiBC;QAhBG,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACpD,2EAA2E;YAC3E,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QAEjC,6FAA6F;QAC7F,IAAI,CAAC,0BAA0B,GAAG,UAAU,CAAC;YACzC,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;QAC7D,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,oCAAoC;QACpC,IAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC;YACpC,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;QAC7D,CAAC,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,sDAAuB,GAAvB;QACI,YAAY,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAC9C,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAEzC,IAAI,CAAC,0BAA0B,GAAG,SAAS,CAAC;QAC5C,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;IAC1C,CAAC;IACL,2BAAC;AAAD,CAAC","file":"7.js","sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CoreComponentsModule } from '@components/components.module';\nimport { CoreDirectivesModule } from '@directives/directives.module';\nimport { CoreQuestionComponentsModule } from '@core/question/components/components.module';\nimport { AddonModQuizPlayerPage } from './player';\n\n@NgModule({\n    declarations: [\n        AddonModQuizPlayerPage,\n    ],\n    imports: [\n        CoreComponentsModule,\n        CoreDirectivesModule,\n        CoreQuestionComponentsModule,\n        IonicPageModule.forChild(AddonModQuizPlayerPage),\n        TranslateModule.forChild()\n    ],\n})\nexport class AddonModQuizPlayerPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/quiz/pages/player/player.module.ts","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy, ViewChild, ChangeDetectorRef, ViewChildren, QueryList, ElementRef } from '@angular/core';\nimport { IonicPage, NavParams, Content, PopoverController, ModalController, Modal, NavController } from 'ionic-angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CoreEventsProvider } from '@providers/events';\nimport { CoreLoggerProvider } from '@providers/logger';\nimport { CoreSitesProvider } from '@providers/sites';\nimport { CoreSyncProvider } from '@providers/sync';\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\nimport { CoreTimeUtilsProvider } from '@providers/utils/time';\nimport { CoreQuestionHelperProvider } from '@core/question/providers/helper';\nimport { CoreQuestionComponent } from '@core/question/components/question/question';\nimport { MoodleMobileApp } from '../../../../../app/app.component';\nimport { AddonModQuizProvider } from '../../providers/quiz';\nimport { AddonModQuizSyncProvider } from '../../providers/quiz-sync';\nimport { AddonModQuizHelperProvider } from '../../providers/helper';\nimport { AddonModQuizAutoSave } from '../../classes/auto-save';\nimport { Subscription } from 'rxjs';\n\n/**\n * Page that allows attempting a quiz.\n */\n@IonicPage({ segment: 'addon-mod-quiz-player' })\n@Component({\n    selector: 'page-addon-mod-quiz-player',\n    templateUrl: 'player.html',\n})\nexport class AddonModQuizPlayerPage implements OnInit, OnDestroy {\n    @ViewChild(Content) content: Content;\n    @ViewChildren(CoreQuestionComponent) questionComponents: QueryList<CoreQuestionComponent>;\n    @ViewChild('quizForm') formElement: ElementRef;\n\n    quiz: any; // The quiz the attempt belongs to.\n    attempt: any; // The attempt being attempted.\n    moduleUrl: string; // URL to the module in the site.\n    component = AddonModQuizProvider.COMPONENT; // Component to link the files to.\n    loaded: boolean; // Whether data has been loaded.\n    quizAborted: boolean; // Whether the quiz was aborted due to an error.\n    offline: boolean; // Whether the quiz is being attempted in offline mode.\n    navigation: any[]; // List of questions to navigate them.\n    questions: any[]; // Questions of the current page.\n    nextPage: number; // Next page.\n    previousPage: number; // Previous page.\n    showSummary: boolean; // Whether the attempt summary should be displayed.\n    summaryQuestions: any[]; // The questions to display in the summary.\n    canReturn: boolean; // Whether the user can return to a page after seeing the summary.\n    preventSubmitMessages: string[]; // List of messages explaining why the quiz cannot be submitted.\n    endTime: number; // The time when the attempt must be finished.\n    autoSaveError: boolean; // Whether there's been an error in auto-save.\n    navigationModal: Modal; // Modal to navigate through the questions.\n\n    protected courseId: number; // The course ID the quiz belongs to.\n    protected quizId: number; // Quiz ID to attempt.\n    protected preflightData: any = {}; // Preflight data to attempt the quiz.\n    protected quizAccessInfo: any; // Quiz access information.\n    protected attemptAccessInfo: any; // Attempt access info.\n    protected lastAttempt: any; // Last user attempt before a new one is created (if needed).\n    protected newAttempt: boolean; // Whether the user is starting a new attempt.\n    protected quizDataLoaded: boolean; // Whether the quiz data has been loaded.\n    protected timeUpCalled: boolean; // Whether the time up function has been called.\n    protected autoSave: AddonModQuizAutoSave; // Class to auto-save answers every certain time.\n    protected autoSaveErrorSubscription: Subscription; // To be notified when an error happens in auto-save.\n    protected forceLeave = false; // If true, don't perform any check when leaving the view.\n    protected reloadNavigaton = false; // Whether navigation needs to be reloaded because some data was sent to server.\n\n    constructor(navParams: NavParams, logger: CoreLoggerProvider, protected translate: TranslateService,\n            protected eventsProvider: CoreEventsProvider, protected sitesProvider: CoreSitesProvider,\n            protected syncProvider: CoreSyncProvider, protected domUtils: CoreDomUtilsProvider, popoverCtrl: PopoverController,\n            protected timeUtils: CoreTimeUtilsProvider, protected quizProvider: AddonModQuizProvider,\n            protected quizHelper: AddonModQuizHelperProvider, protected quizSync: AddonModQuizSyncProvider,\n            protected questionHelper: CoreQuestionHelperProvider, protected cdr: ChangeDetectorRef,\n            modalCtrl: ModalController, protected navCtrl: NavController,  protected mmApp: MoodleMobileApp) {\n\n        this.quizId = navParams.get('quizId');\n        this.courseId = navParams.get('courseId');\n        this.moduleUrl = navParams.get('moduleUrl');\n\n        // Block the quiz so it cannot be synced.\n        this.syncProvider.blockOperation(AddonModQuizProvider.COMPONENT, this.quizId);\n\n        // Create the auto save instance.\n        this.autoSave = new AddonModQuizAutoSave('addon-mod_quiz-player-form', '#addon-mod_quiz-connection-error-button',\n                logger, popoverCtrl, questionHelper, quizProvider);\n\n        // Create the navigation modal.\n        this.navigationModal = modalCtrl.create('AddonModQuizNavigationModalPage', {\n            page: this\n        }, { cssClass: 'core-modal-lateral',\n            showBackdrop: true,\n            enableBackdropDismiss: true,\n            enterAnimation: 'core-modal-lateral-transition',\n            leaveAnimation: 'core-modal-lateral-transition' });\n    }\n\n    /**\n     * Component being initialized.\n     */\n    ngOnInit(): void {\n        // Start the player when the page is loaded.\n        this.start();\n\n        // Listen for errors on auto-save.\n        this.autoSaveErrorSubscription = this.autoSave.onError().subscribe((error) => {\n            this.autoSaveError = error;\n            this.cdr.detectChanges();\n        });\n    }\n\n    /**\n     * Component being destroyed.\n     */\n    ngOnDestroy(): void {\n        // Stop auto save.\n        this.autoSave.cancelAutoSave();\n        this.autoSave.stopCheckChangesProcess();\n        this.autoSaveErrorSubscription && this.autoSaveErrorSubscription.unsubscribe();\n\n        // Unblock the quiz so it can be synced.\n        this.syncProvider.unblockOperation(AddonModQuizProvider.COMPONENT, this.quizId);\n    }\n\n    /**\n     * Check if we can leave the page or not.\n     *\n     * @return Resolved if we can leave it, rejected if not.\n     */\n    async ionViewCanLeave(): Promise<void> {\n        if (this.forceLeave) {\n            return;\n        }\n\n        if (this.questions && this.questions.length && !this.showSummary) {\n            // Save answers.\n            const modal = this.domUtils.showModalLoading('core.sending', true);\n\n            try {\n                await this.processAttempt(false, false);\n            } catch (error) {\n                // Save attempt failed. Show confirmation.\n                modal.dismiss();\n\n                await this.domUtils.showConfirm(this.translate.instant('addon.mod_quiz.confirmleavequizonerror'));\n\n                this.domUtils.triggerFormCancelledEvent(this.formElement, this.sitesProvider.getCurrentSiteId());\n            } finally {\n                modal.dismiss();\n            }\n        }\n    }\n\n    /**\n     * Runs when the page is about to leave and no longer be the active page.\n     */\n    ionViewWillLeave(): void {\n        this.mmApp.closeModal();\n    }\n\n    /**\n     * Abort the quiz.\n     */\n    abortQuiz(): void {\n        this.quizAborted = true;\n    }\n\n    /**\n     * A behaviour button in a question was clicked (Check, Redo, ...).\n     *\n     * @param button Clicked button.\n     */\n    behaviourButtonClicked(button: any): void {\n        // Confirm that the user really wants to do it.\n        this.domUtils.showConfirm(this.translate.instant('core.areyousure')).then(() => {\n            const modal = this.domUtils.showModalLoading('core.sending', true);\n\n            // Get the answers.\n            return this.prepareAnswers().then((answers) => {\n\n                // Add the clicked button data.\n                answers[button.name] = button.value;\n\n                // Behaviour checks are always in online.\n                return this.quizProvider.processAttempt(this.quiz, this.attempt, answers, this.preflightData);\n            }).then(() => {\n                this.reloadNavigaton = true; // Data sent to server, navigation should be reloaded.\n\n                // Reload the current page.\n                const scrollElement = this.content.getScrollElement(),\n                    scrollTop = scrollElement.scrollTop || 0,\n                    scrollLeft = scrollElement.scrollLeft || 0;\n\n                this.loaded = false;\n                this.domUtils.scrollToTop(this.content); // Scroll top so the spinner is seen.\n\n                return this.loadPage(this.attempt.currentpage).finally(() => {\n                    this.loaded = true;\n                    this.domUtils.scrollTo(this.content, scrollLeft, scrollTop);\n                });\n            }).finally(() => {\n                modal.dismiss();\n            });\n        }).catch((error) => {\n            this.domUtils.showErrorModalDefault(error, 'Error performing action.');\n        });\n    }\n\n    /**\n     * Change the current page. If slot is supplied, try to scroll to that question.\n     *\n     * @param page Page to load. -1 means summary.\n     * @param fromModal Whether the page was selected using the navigation modal.\n     * @param slot Slot of the question to scroll to.\n     */\n    changePage(page: number, fromModal?: boolean, slot?: number): void {\n        if (page != -1 && (this.attempt.state == AddonModQuizProvider.ATTEMPT_OVERDUE || this.attempt.finishedOffline)) {\n            // We can't load a page if overdue or the local attempt is finished.\n            return;\n        } else if (page == this.attempt.currentpage && !this.showSummary && typeof slot != 'undefined') {\n            // Navigating to a question in the current page.\n            this.scrollToQuestion(slot);\n\n            return;\n        } else if ((page == this.attempt.currentpage && !this.showSummary) || (fromModal && this.quiz.isSequential && page != -1)) {\n            // If the user is navigating to the current page we do nothing.\n            // Also, in sequential quizzes we don't allow navigating using the modal except for finishing the quiz (summary).\n            return;\n        } else if (page === -1 && this.showSummary) {\n            // Summary already shown.\n            return;\n        }\n\n        this.loaded = false;\n        this.domUtils.scrollToTop(this.content);\n\n        // First try to save the attempt data. We only save it if we're not seeing the summary.\n        const promise = this.showSummary ? Promise.resolve() : this.processAttempt(false, false);\n        promise.then(() => {\n            if (!this.showSummary) {\n                this.reloadNavigaton = true; // Data sent to server, navigation should be reloaded.\n            }\n\n            // Attempt data successfully saved, load the page or summary.\n            let subPromise;\n\n            // Stop checking for changes during page change.\n            this.autoSave.stopCheckChangesProcess();\n\n            if (page === -1) {\n                subPromise = this.loadSummary();\n            } else {\n                subPromise = this.loadPage(page);\n            }\n\n            return subPromise.catch((error) => {\n                // If the user isn't seeing the summary, start the check again.\n                if (!this.showSummary) {\n                    this.autoSave.startCheckChangesProcess(this.quiz, this.attempt, this.preflightData, this.offline);\n                }\n\n                this.domUtils.showErrorModalDefault(error, 'addon.mod_quiz.errorgetquestions', true);\n            });\n        }, (error) => {\n            this.domUtils.showErrorModalDefault(error, 'addon.mod_quiz.errorsaveattempt', true);\n        }).finally(() => {\n            this.loaded = true;\n\n            if (typeof slot != 'undefined') {\n                // Scroll to the question. Give some time to the questions to render.\n                setTimeout(() => {\n                    this.scrollToQuestion(slot);\n                }, 2000);\n            }\n        });\n    }\n\n    /**\n     * Convenience function to get the quiz data.\n     *\n     * @return Promise resolved when done.\n     */\n    protected fetchData(): Promise<any> {\n        // Wait for any ongoing sync to finish. We won't sync a quiz while it's being played.\n        return this.quizSync.waitForSync(this.quizId).then(() => {\n            // Sync finished, now get the quiz.\n            return this.quizProvider.getQuizById(this.courseId, this.quizId);\n        }).then((quizData) => {\n            this.quiz = quizData;\n            this.quiz.isSequential = this.quizProvider.isNavigationSequential(this.quiz);\n\n            if (this.quizProvider.isQuizOffline(this.quiz)) {\n                // Quiz supports offline.\n                return true;\n            } else {\n                // Quiz doesn't support offline right now, but maybe it did and then the setting was changed.\n                // If we have an unfinished offline attempt then we'll use offline mode.\n                return this.quizProvider.isLastAttemptOfflineUnfinished(this.quiz);\n            }\n        }).then((offlineMode) => {\n            this.offline = offlineMode;\n\n            if (this.quiz.timelimit > 0) {\n                this.quiz.readableTimeLimit = this.timeUtils.formatTime(this.quiz.timelimit);\n            }\n\n            // Get access information for the quiz.\n            return this.quizProvider.getQuizAccessInformation(this.quiz.id, this.offline, true);\n        }).then((info) => {\n            this.quizAccessInfo = info;\n\n            // Get user attempts to determine last attempt.\n            return this.quizProvider.getUserAttempts(this.quiz.id, 'all', true, this.offline, true);\n        }).then((attempts) => {\n            if (!attempts.length) {\n                // There are no attempts, start a new one.\n                this.newAttempt = true;\n            } else {\n                const promises = [];\n\n                // Get the last attempt. If it's finished, start a new one.\n                this.lastAttempt = attempts[attempts.length - 1];\n                this.newAttempt = this.quizProvider.isAttemptFinished(this.lastAttempt.state);\n\n                // Load quiz last sync time.\n                promises.push(this.quizSync.getSyncTime(this.quiz.id).then((time) => {\n                    this.quiz.syncTime = time;\n                    this.quiz.syncTimeReadable = this.quizSync.getReadableTimeFromTimestamp(time);\n                }));\n\n                // Load flag to show if attempts are finished but not synced.\n                promises.push(this.quizProvider.loadFinishedOfflineData(attempts));\n\n                return Promise.all(promises);\n            }\n        }).catch((error) => {\n            this.domUtils.showErrorModalDefault(error, 'addon.mod_quiz.errorgetquiz', true);\n        });\n    }\n\n    /**\n     * Finish an attempt, either by timeup or because the user clicked to finish it.\n     *\n     * @param userFinish Whether the user clicked to finish the attempt.\n     * @param timeUp Whether the quiz time is up.\n     * @return Promise resolved when done.\n     */\n    finishAttempt(userFinish?: boolean, timeUp?: boolean): Promise<void> {\n        let promise;\n\n        // Show confirm if the user clicked the finish button and the quiz is in progress.\n        if (!timeUp && this.attempt.state == AddonModQuizProvider.ATTEMPT_IN_PROGRESS) {\n            promise = this.domUtils.showConfirm(this.translate.instant('addon.mod_quiz.confirmclose'));\n        } else {\n            promise = Promise.resolve();\n        }\n\n        return promise.then(() => {\n            const modal = this.domUtils.showModalLoading('core.sending', true);\n\n            return this.processAttempt(userFinish, timeUp).then(() => {\n                // Trigger an event to notify the attempt was finished.\n                this.eventsProvider.trigger(AddonModQuizProvider.ATTEMPT_FINISHED_EVENT, {\n                    quizId: this.quizId,\n                    attemptId: this.attempt.id,\n                    synced: !this.offline\n                }, this.sitesProvider.getCurrentSiteId());\n\n                this.eventsProvider.trigger(CoreEventsProvider.ACTIVITY_DATA_SENT, { module: 'quiz' });\n\n                // Leave the player.\n                this.forceLeave = true;\n                this.navCtrl.pop();\n            }).finally(() => {\n                modal.dismiss();\n            });\n        }).catch((error) => {\n            this.domUtils.showErrorModalDefault(error, 'addon.mod_quiz.errorsaveattempt', true);\n        });\n    }\n\n    /**\n     * Fix sequence checks of current page.\n     *\n     * @return Promise resolved when done.\n     */\n    protected fixSequenceChecks(): Promise<any> {\n        // Get current page data again to get the latest sequencechecks.\n        return this.quizProvider.getAttemptData(this.attempt.id, this.attempt.currentpage, this.preflightData, this.offline, true)\n                .then((data) => {\n\n            const newSequenceChecks = {};\n\n            data.questions.forEach((question) => {\n                newSequenceChecks[question.slot] = this.questionHelper.getQuestionSequenceCheckFromHtml(question.html);\n            });\n\n            // Notify the new sequence checks to the components.\n            this.questionComponents.forEach((component) => {\n                component.updateSequenceCheck(newSequenceChecks);\n            });\n        });\n    }\n\n    /**\n     * Get the input answers.\n     *\n     * @return Object with the answers.\n     */\n    protected getAnswers(): any {\n        return this.questionHelper.getAnswersFromForm(document.forms['addon-mod_quiz-player-form']);\n    }\n\n    /**\n     * Initializes the timer if enabled.\n     */\n    protected initTimer(): void {\n        if (this.attemptAccessInfo.endtime > 0) {\n            // Quiz has an end time. Check if time left should be shown.\n            if (this.quizProvider.shouldShowTimeLeft(this.quizAccessInfo.activerulenames, this.attempt,\n                    this.attemptAccessInfo.endtime)) {\n                this.endTime = this.attemptAccessInfo.endtime;\n            } else {\n                delete this.endTime;\n            }\n        }\n    }\n\n    /**\n     * Load a page questions.\n     *\n     * @param page The page to load.\n     * @return Promise resolved when done.\n     */\n    protected loadPage(page: number): Promise<void> {\n        return this.quizProvider.getAttemptData(this.attempt.id, page, this.preflightData, this.offline, true).then((data) => {\n            // Update attempt, status could change during the execution.\n            this.attempt = data.attempt;\n            this.attempt.currentpage = page;\n\n            this.questions = data.questions;\n            this.nextPage = data.nextpage;\n            this.previousPage = this.quiz.isSequential ? -1 : page - 1;\n            this.showSummary = false;\n\n            this.questions.forEach((question) => {\n                // Get the readable mark for each question.\n                question.readableMark = this.quizHelper.getQuestionMarkFromHtml(question.html);\n\n                // Extract the question info box.\n                this.questionHelper.extractQuestionInfoBox(question, '.info');\n\n                // Set the preferred behaviour.\n                question.preferredBehaviour = this.quiz.preferredbehaviour;\n\n                // Check if the question is blocked. If it is, treat it as a description question.\n                if (this.quizProvider.isQuestionBlocked(question)) {\n                    question.type = 'description';\n                }\n            });\n\n            // Mark the page as viewed. We'll ignore errors in this call.\n            this.quizProvider.logViewAttempt(this.attempt.id, page, this.preflightData, this.offline, this.quiz).catch((error) => {\n                // Ignore errors.\n            });\n\n            // Start looking for changes.\n            this.autoSave.startCheckChangesProcess(this.quiz, this.attempt, this.preflightData, this.offline);\n        });\n    }\n\n    /**\n     * Load attempt summary.\n     *\n     * @return Promise resolved when done.\n     */\n    protected loadSummary(): Promise<void> {\n        this.summaryQuestions = [];\n\n        return this.quizProvider.getAttemptSummary(this.attempt.id, this.preflightData, this.offline, true, true).then((qs) => {\n            this.showSummary = true;\n            this.summaryQuestions = qs;\n\n            this.canReturn = this.attempt.state == AddonModQuizProvider.ATTEMPT_IN_PROGRESS && !this.attempt.finishedOffline;\n            this.preventSubmitMessages = this.quizProvider.getPreventSubmitMessages(this.summaryQuestions);\n\n            this.attempt.dueDateWarning = this.quizProvider.getAttemptDueDateWarning(this.quiz, this.attempt);\n\n            // Log summary as viewed.\n            this.quizProvider.logViewAttemptSummary(this.attempt.id, this.preflightData, this.quizId, this.quiz.name)\n                    .catch((error) => {\n                // Ignore errors.\n            });\n        });\n    }\n\n    /**\n     * Load data to navigate the questions using the navigation modal.\n     *\n     * @return Promise resolved when done.\n     */\n    protected loadNavigation(): Promise<void> {\n        // We use the attempt summary to build the navigation because it contains all the questions.\n        return this.quizProvider.getAttemptSummary(this.attempt.id, this.preflightData, this.offline, true, true)\n                .then((questions) => {\n\n            questions.forEach((question) => {\n                question.stateClass = this.questionHelper.getQuestionStateClass(question.state);\n            });\n\n            this.navigation = questions;\n        });\n    }\n\n    /**\n     * Open the navigation modal.\n     *\n     * @return Promise resolved when done.\n     */\n    openNavigation(): Promise<any> {\n        let promise;\n\n        if (this.reloadNavigaton) {\n            // Some data has changed, reload the navigation.\n            const modal = this.domUtils.showModalLoading();\n\n            promise = this.loadNavigation().catch(() => {\n                // Ignore errors.\n            }).then(() => {\n                modal.dismiss();\n                this.reloadNavigaton = false;\n            });\n        } else {\n            promise = Promise.resolve();\n        }\n\n        return promise.finally(() => {\n            this.navigationModal.present();\n        });\n    }\n\n    // Prepare the answers to be sent for the attempt.\n    protected prepareAnswers(): Promise<any> {\n        return this.questionHelper.prepareAnswers(this.questions, this.getAnswers(), this.offline);\n    }\n\n    /**\n     * Process attempt.\n     *\n     * @param userFinish Whether the user clicked to finish the attempt.\n     * @param timeUp Whether the quiz time is up.\n     * @return Promise resolved when done.\n     * @param retrying Whether we're retrying the change.\n     */\n    protected processAttempt(userFinish?: boolean, timeUp?: boolean, retrying?: boolean): Promise<any> {\n        // Get the answers to send.\n        return this.prepareAnswers().then((answers) => {\n            // Send the answers.\n            return this.quizProvider.processAttempt(this.quiz, this.attempt, answers, this.preflightData, userFinish, timeUp,\n                    this.offline).catch((error) => {\n\n                if (error && error.errorcode == 'submissionoutofsequencefriendlymessage') {\n                    // There was an error with the sequence check. Try to ammend it.\n                    return this.fixSequenceChecks().then((): any => {\n                        if (retrying) {\n                            // We're already retrying, don't send the data again because it could cause an infinite loop.\n                            return Promise.reject(error);\n                        }\n\n                        // Sequence checks updated, try to send the data again.\n                        return this.processAttempt(userFinish, timeUp, true);\n                    }, () => {\n                        return Promise.reject(error);\n                    });\n                }\n\n                return Promise.reject(error);\n            });\n        }).then(() => {\n            // Answers saved, cancel auto save.\n            this.autoSave.cancelAutoSave();\n            this.autoSave.hideAutoSaveError();\n\n            if (this.formElement) {\n                this.domUtils.triggerFormSubmittedEvent(this.formElement, !this.offline, this.sitesProvider.getCurrentSiteId());\n            }\n        });\n    }\n\n    /**\n     * Scroll to a certain question.\n     *\n     * @param slot Slot of the question to scroll to.\n     */\n    protected scrollToQuestion(slot: number): void {\n        this.domUtils.scrollToElementBySelector(this.content, '#addon-mod_quiz-question-' + slot);\n    }\n\n    /**\n     * Show connection error.\n     *\n     * @param ev Click event.\n     */\n    showConnectionError(ev: Event): void {\n        this.autoSave.showAutoSaveError(ev);\n    }\n\n    /**\n     * Convenience function to start the player.\n     */\n    start(): void {\n        let promise;\n        this.loaded = false;\n\n        if (this.quizDataLoaded) {\n            // Quiz data has been loaded, try to start or continue.\n            promise = this.startOrContinueAttempt();\n        } else {\n            // Fetch data.\n            promise = this.fetchData().then(() => {\n                this.quizDataLoaded = true;\n\n                return this.startOrContinueAttempt();\n            });\n        }\n\n        promise.finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Start or continue an attempt.\n     *\n     * @return [description]\n     */\n    protected startOrContinueAttempt(): Promise<any> {\n        const attempt = this.newAttempt ? undefined : this.lastAttempt;\n\n        // Get the preflight data and start attempt if needed.\n        return this.quizHelper.getAndCheckPreflightData(this.quiz, this.quizAccessInfo, this.preflightData, attempt, this.offline,\n                false, 'addon.mod_quiz.startattempt').then((attempt) => {\n\n            // Re-fetch attempt access information with the right attempt (might have changed because a new attempt was created).\n            return this.quizProvider.getAttemptAccessInformation(this.quiz.id, attempt.id, this.offline, true).then((info) => {\n                this.attemptAccessInfo = info;\n                this.attempt = attempt;\n\n                return this.loadNavigation();\n            }).then(() => {\n                if (this.attempt.state != AddonModQuizProvider.ATTEMPT_OVERDUE && !this.attempt.finishedOffline) {\n                    // Attempt not overdue and not finished in offline, load page.\n                    return this.loadPage(this.attempt.currentpage).then(() => {\n                        this.initTimer();\n                    });\n                } else {\n                    // Attempt is overdue or finished in offline, we can only load the summary.\n                    return this.loadSummary();\n                }\n            });\n        }).catch((error) => {\n            this.domUtils.showErrorModalDefault(error, 'addon.mod_quiz.errorgetquestions', true);\n        });\n    }\n\n    /**\n     * Quiz time has finished.\n     */\n    timeUp(): void {\n        if (this.timeUpCalled) {\n            return;\n        }\n\n        this.timeUpCalled = true;\n        this.finishAttempt(false, true);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/quiz/pages/player/player.ts","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { PopoverController, Popover } from 'ionic-angular';\nimport { CoreLoggerProvider } from '@providers/logger';\nimport { CoreQuestionHelperProvider } from '@core/question/providers/helper';\nimport { AddonModQuizProvider } from '../providers/quiz';\nimport { AddonModQuizConnectionErrorComponent } from '../components/connection-error/connection-error';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Class to support auto-save in quiz. Every certain seconds, it will check if there are changes in the current page answers\n * and, if so, it will save them automatically.\n */\nexport class AddonModQuizAutoSave {\n    protected CHECK_CHANGES_INTERVAL = 5000;\n\n    protected logger;\n    protected checkChangesInterval; // Interval to check if there are changes in the answers.\n    protected loadPreviousAnswersTimeout; // Timeout to load previous answers.\n    protected autoSaveTimeout; // Timeout to auto-save the answers.\n    protected popover: Popover; // Popover to display there's been an error.\n    protected popoverShown = false; // Whether the popover is shown.\n    protected previousAnswers: any; // The previous answers. It is used to check if answers have changed.\n    protected errorObservable: BehaviorSubject<boolean>; // An observable to notify if there's been an error.\n\n    /**\n     * Constructor.\n     *\n     * @param formName Name of the form where the answers are stored.\n     * @param buttonSelector Selector to find the button to show the connection error.\n     * @param loggerProvider CoreLoggerProvider instance.\n     * @param popoverCtrl PopoverController instance.\n     * @param questionHelper CoreQuestionHelperProvider instance.\n     * @param quizProvider AddonModQuizProvider instance.\n     */\n    constructor(protected formName: string, protected buttonSelector: string, loggerProvider: CoreLoggerProvider,\n            protected popoverCtrl: PopoverController, protected questionHelper: CoreQuestionHelperProvider,\n            protected quizProvider: AddonModQuizProvider) {\n\n        this.logger = loggerProvider.getInstance('AddonModQuizAutoSave');\n\n        // Create the popover.\n        this.popover = this.popoverCtrl.create(AddonModQuizConnectionErrorComponent);\n        this.popover.onDidDismiss(() => {\n            this.popoverShown = false;\n        });\n\n        // Create the observable to notify if an error happened.\n        this.errorObservable = new BehaviorSubject<boolean>(false);\n    }\n\n    /**\n     * Cancel a pending auto save.\n     */\n    cancelAutoSave(): void {\n        clearTimeout(this.autoSaveTimeout);\n        this.autoSaveTimeout = undefined;\n    }\n\n    /**\n     * Check if the answers have changed in a page.\n     *\n     * @param quiz Quiz.\n     * @param attempt Attempt.\n     * @param preflightData Preflight data.\n     * @param offline Whether the quiz is being attempted in offline mode.\n     */\n    checkChanges(quiz: any, attempt: any, preflightData: any, offline?: boolean): void {\n        if (this.autoSaveTimeout) {\n            // We already have an auto save pending, no need to check changes.\n            return;\n        }\n\n        const answers = this.getAnswers();\n\n        if (!this.previousAnswers) {\n            // Previous answers isn't set, set it now.\n            this.previousAnswers = answers;\n        } else {\n            // Check if answers have changed.\n            let equal = true;\n\n            for (const name in answers) {\n                if (this.previousAnswers[name] != answers[name]) {\n                    equal = false;\n                    break;\n                }\n            }\n\n            if (!equal) {\n                this.setAutoSaveTimer(quiz, attempt, preflightData, offline);\n            }\n\n            this.previousAnswers = answers;\n        }\n    }\n\n    /**\n     * Get answers from a form.\n     *\n     * @return Answers.\n     */\n    protected getAnswers(): any {\n        return this.questionHelper.getAnswersFromForm(document.forms[this.formName]);\n    }\n\n    /**\n     * Hide the auto save error.\n     */\n    hideAutoSaveError(): void {\n        this.errorObservable.next(false);\n        this.popover.dismiss();\n    }\n\n    /**\n     * Returns an observable that will notify when an error happens or stops.\n     * It will send true when there's an error, and false when the error has been ammended.\n     *\n     * @return Observable.\n     */\n    onError(): BehaviorSubject<boolean> {\n        return this.errorObservable;\n    }\n\n    /**\n     * Schedule an auto save process if it's not scheduled already.\n     *\n     * @param quiz Quiz.\n     * @param attempt Attempt.\n     * @param preflightData Preflight data.\n     * @param offline Whether the quiz is being attempted in offline mode.\n     */\n    setAutoSaveTimer(quiz: any, attempt: any, preflightData: any, offline?: boolean): void {\n        // Don't schedule if already shceduled or quiz is almost closed.\n        if (quiz.autosaveperiod && !this.autoSaveTimeout && !this.quizProvider.isAttemptTimeNearlyOver(quiz, attempt)) {\n\n            // Schedule save.\n            this.autoSaveTimeout = setTimeout(() => {\n                const answers = this.getAnswers();\n                this.cancelAutoSave();\n                this.previousAnswers = answers; // Update previous answers to match what we're sending to the server.\n\n                this.quizProvider.saveAttempt(quiz, attempt, answers, preflightData, offline).then(() => {\n                    // Save successful, we can hide the connection error if it was shown.\n                    this.hideAutoSaveError();\n                }).catch((error) => {\n                    // Error auto-saving. Show error and set timer again.\n                    this.logger.warn('Error auto-saving data.', error);\n\n                    // If there was no error already, show the error message.\n                    if (!this.errorObservable.getValue()) {\n                        this.errorObservable.next(true);\n                        this.showAutoSaveError();\n                    }\n\n                    // Try again.\n                    this.setAutoSaveTimer(quiz, attempt, preflightData, offline);\n                });\n            }, quiz.autosaveperiod * 1000);\n        }\n    }\n\n    /**\n     * Show an error popover due to an auto save error.\n     */\n    showAutoSaveError(ev?: Event): void {\n        // Don't show popover if it was already shown.\n        if (!this.popoverShown) {\n            this.popoverShown = true;\n\n            // If no event is provided, simulate it targeting the button.\n            this.popover.present({\n                ev: ev || { target: document.querySelector(this.buttonSelector) }\n            });\n        }\n    }\n\n    /**\n     * Start a process to periodically check changes in answers.\n     *\n     * @param quiz Quiz.\n     * @param attempt Attempt.\n     * @param preflightData Preflight data.\n     * @param offline Whether the quiz is being attempted in offline mode.\n     */\n    startCheckChangesProcess(quiz: any, attempt: any, preflightData: any, offline?: boolean): void {\n        if (this.checkChangesInterval || !quiz.autosaveperiod) {\n            // We already have the interval in place or the quiz has autosave disabled.\n            return;\n        }\n\n        this.previousAnswers = undefined;\n\n        // Load initial answers in 2.5 seconds so the first check interval finds them already loaded.\n        this.loadPreviousAnswersTimeout = setTimeout(() => {\n            this.checkChanges(quiz, attempt, preflightData, offline);\n        }, 2500);\n\n        // Check changes every certain time.\n        this.checkChangesInterval = setInterval(() => {\n            this.checkChanges(quiz, attempt, preflightData, offline);\n        }, this.CHECK_CHANGES_INTERVAL);\n    }\n\n    /**\n     * Stops the periodical check for changes.\n     */\n    stopCheckChangesProcess(): void {\n        clearTimeout(this.loadPreviousAnswersTimeout);\n        clearInterval(this.checkChangesInterval);\n\n        this.loadPreviousAnswersTimeout = undefined;\n        this.checkChangesInterval = undefined;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/quiz/classes/auto-save.ts"],"sourceRoot":""}