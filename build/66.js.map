{"version":3,"sources":["../../src/addon/notifications/pages/settings/settings.module.ts","../../src/addon/notifications/pages/settings/settings.ts"],"names":[],"mappings":"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","file":"66.js","sourcesContent":["// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AddonNotificationsSettingsPage } from './settings';\nimport { CoreComponentsModule } from '@components/components.module';\nimport { CoreDirectivesModule } from '@directives/directives.module';\n\n@NgModule({\n    declarations: [\n        AddonNotificationsSettingsPage,\n    ],\n    imports: [\n        CoreComponentsModule,\n        CoreDirectivesModule,\n        IonicPageModule.forChild(AddonNotificationsSettingsPage),\n        TranslateModule.forChild()\n    ],\n})\nexport class AddonNotificationsSettingsPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/notifications/pages/settings/settings.module.ts","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, Optional } from '@angular/core';\nimport { IonicPage, NavController } from 'ionic-angular';\nimport {\n    AddonNotificationsProvider, AddonNotificationsNotificationPreferences, AddonNotificationsNotificationPreferencesProcessor,\n    AddonNotificationsNotificationPreferencesComponent, AddonNotificationsNotificationPreferencesNotification,\n    AddonNotificationsNotificationPreferencesNotificationProcessorState\n} from '../../providers/notifications';\nimport { CoreUserProvider } from '@core/user/providers/user';\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\nimport { CoreSettingsHelper } from '@core/settings/providers/helper';\nimport { AddonMessageOutputDelegate, AddonMessageOutputHandlerData } from '@addon/messageoutput/providers/delegate';\nimport { CoreLocalNotificationsProvider } from '@providers/local-notifications';\nimport { CoreConfigProvider } from '@providers/config';\nimport { CoreAppProvider } from '@providers/app';\nimport { CoreConstants } from '@core/constants';\nimport { CoreEventsProvider } from '@providers/events';\nimport { CoreSitesProvider } from '@providers/sites';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\n\n/**\n * Page that displays notifications settings.\n */\n@IonicPage({ segment: 'addon-notifications-settings' })\n@Component({\n    selector: 'page-addon-notifications-settings',\n    templateUrl: 'settings.html',\n})\nexport class AddonNotificationsSettingsPage implements OnDestroy {\n    protected updateTimeout: any;\n\n    components: AddonNotificationsNotificationPreferencesComponent[];\n    preferences: AddonNotificationsNotificationPreferences;\n    preferencesLoaded: boolean;\n    currentProcessor: AddonNotificationsNotificationPreferencesProcessorFormatted;\n    notifPrefsEnabled: boolean;\n    canChangeSound: boolean;\n    notificationSound: boolean;\n    processorHandlers = [];\n\n    constructor(private notificationsProvider: AddonNotificationsProvider, private domUtils: CoreDomUtilsProvider,\n            private settingsHelper: CoreSettingsHelper, private userProvider: CoreUserProvider,\n            private navCtrl: NavController, private messageOutputDelegate: AddonMessageOutputDelegate,\n            appProvider: CoreAppProvider, private configProvider: CoreConfigProvider, private eventsProvider: CoreEventsProvider,\n            private localNotificationsProvider: CoreLocalNotificationsProvider, private sitesProvider: CoreSitesProvider,\n            @Optional() private svComponent: CoreSplitViewComponent) {\n\n        this.notifPrefsEnabled = notificationsProvider.isNotificationPreferencesEnabled();\n        this.canChangeSound = localNotificationsProvider.canDisableSound();\n\n        if (this.canChangeSound) {\n            configProvider.get(CoreConstants.SETTINGS_NOTIFICATION_SOUND, true).then((enabled) => {\n                this.notificationSound = !!enabled;\n            });\n        }\n    }\n\n    /**\n     * View loaded.\n     */\n    ionViewDidLoad(): void {\n        if (this.notifPrefsEnabled) {\n            this.fetchPreferences();\n        } else {\n            this.preferencesLoaded = true;\n        }\n    }\n\n    /**\n     * Fetches preference data.\n     *\n     * @return Resolved when done.\n     */\n    protected fetchPreferences(): Promise<any> {\n        return this.notificationsProvider.getNotificationPreferences().then((preferences) => {\n            if (!this.currentProcessor) {\n                // Initialize current processor. Load \"Mobile\" (airnotifier) if available.\n                this.currentProcessor = this.settingsHelper.getProcessor(preferences.processors, 'airnotifier');\n            }\n\n            if (!this.currentProcessor) {\n                // Shouldn't happen.\n                return Promise.reject('No processor found');\n            }\n\n            preferences.enableall = !preferences.disableall;\n            this.preferences = preferences;\n            this.loadProcessor(this.currentProcessor);\n\n            // Get display data of message output handlers (thery are displayed in the context menu),\n            this.processorHandlers = [];\n            if (preferences.processors) {\n                preferences.processors.forEach((processor: AddonNotificationsNotificationPreferencesProcessorFormatted) => {\n                    processor.supported = this.messageOutputDelegate.hasHandler(processor.name, true);\n                    if (processor.hassettings && processor.supported) {\n                        this.processorHandlers.push(this.messageOutputDelegate.getDisplayData(processor));\n                    }\n                });\n            }\n        }).catch((message) => {\n            this.domUtils.showErrorModal(message);\n        }).finally(() => {\n            this.preferencesLoaded = true;\n        });\n    }\n\n    /**\n     * Load a processor.\n     *\n     * @param processor Processor object.\n     */\n    protected loadProcessor(processor: AddonNotificationsNotificationPreferencesProcessorFormatted): void {\n        if (!processor) {\n            return;\n        }\n        this.currentProcessor = processor;\n        this.components = this.settingsHelper.getProcessorComponents(processor.name, this.preferences.components);\n    }\n\n    /**\n     * Update preferences after a certain time. The purpose is to store the updated data, it won't be reflected in the view.\n     */\n     protected updatePreferencesAfterDelay(): void {\n        // Cancel pending updates.\n        clearTimeout(this.updateTimeout);\n\n        this.updateTimeout = setTimeout(() => {\n            this.updateTimeout = null;\n            this.updatePreferences();\n        }, 5000);\n    }\n\n    /**\n     * Update preferences. The purpose is to store the updated data, it won't be reflected in the view.\n     */\n    protected updatePreferences(): void {\n        this.notificationsProvider.invalidateNotificationPreferences().finally(() => {\n            this.notificationsProvider.getNotificationPreferences();\n        });\n    }\n\n    /**\n     * The selected processor was changed.\n     *\n     * @param name Name of the selected processor.\n     */\n    changeProcessor(name: string): void {\n        this.preferences.processors.forEach((processor) => {\n            if (processor.name == name) {\n                this.loadProcessor(processor);\n            }\n        });\n    }\n\n    /**\n     * Refresh the list of preferences.\n     *\n     * @param refresher Refresher.\n     */\n    refreshPreferences(refresher?: any): void {\n        this.notificationsProvider.invalidateNotificationPreferences().finally(() => {\n            this.fetchPreferences().finally(() => {\n                refresher && refresher.complete();\n            });\n        });\n    }\n\n    /**\n     * Open extra preferences.\n     *\n     * @param handlerData\n     */\n    openExtraPreferences(handlerData: AddonMessageOutputHandlerData): void {\n        // Decide which navCtrl to use. If this page is inside a split view, use the split view's master nav.\n        const navCtrl = this.svComponent ? this.svComponent.getMasterNav() : this.navCtrl;\n        navCtrl.push(handlerData.page, handlerData.pageParams);\n    }\n\n    /**\n     * Change the value of a certain preference.\n     *\n     * @param notification Notification object.\n     * @param state State name, ['loggedin', 'loggedoff'].\n     */\n    changePreference(notification: AddonNotificationsNotificationPreferencesNotificationFormatted, state: string): void {\n        const processorState: AddonNotificationsNotificationPreferencesNotificationProcessorStateFormatted =\n                notification.currentProcessor[state];\n        const preferenceName = notification.preferencekey + '_' + processorState.name;\n        let value;\n\n        notification.processors.forEach((processor) => {\n            if (processor[state].checked) {\n                if (!value) {\n                    value = processor.name;\n                } else {\n                    value += ',' + processor.name;\n                }\n            }\n        });\n\n        if (!value) {\n            value = 'none';\n        }\n\n        processorState.updating = true;\n\n        this.userProvider.updateUserPreference(preferenceName, value).then(() => {\n            // Update the preferences since they were modified.\n            this.updatePreferencesAfterDelay();\n        }).catch((message) => {\n            // Show error and revert change.\n            this.domUtils.showErrorModal(message);\n            notification.currentProcessor[state].checked = !notification.currentProcessor[state].checked;\n        }).finally(() => {\n            processorState.updating = false;\n        });\n    }\n\n    /**\n     * Enable all notifications changed.\n     */\n    enableAll(enable: boolean): void {\n        const modal = this.domUtils.showModalLoading('core.sending', true);\n        this.userProvider.updateUserPreferences([], !enable).then(() => {\n            // Update the preferences since they were modified.\n            this.updatePreferencesAfterDelay();\n        }).catch((message) => {\n            // Show error and revert change.\n            this.domUtils.showErrorModal(message);\n            this.preferences.enableall = !this.preferences.enableall;\n        }).finally(() => {\n            modal.dismiss();\n        });\n    }\n\n    /**\n     * Change the notification sound setting.\n     *\n     * @param enabled True to enable the notification sound, false to disable it.\n     */\n    changeNotificationSound(enabled: boolean): void {\n        this.configProvider.set(CoreConstants.SETTINGS_NOTIFICATION_SOUND, enabled ? 1 : 0).finally(() => {\n            const siteId = this.sitesProvider.getCurrentSiteId();\n            this.eventsProvider.trigger(CoreEventsProvider.NOTIFICATION_SOUND_CHANGED, {enabled}, siteId);\n            this.localNotificationsProvider.rescheduleAll();\n        });\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        // If there is a pending action to update preferences, execute it right now.\n        if (this.updateTimeout) {\n            clearTimeout(this.updateTimeout);\n            this.updatePreferences();\n        }\n    }\n}\n\n/**\n * Notification preferences notification with some calculated data.\n */\ntype AddonNotificationsNotificationPreferencesNotificationFormatted = AddonNotificationsNotificationPreferencesNotification & {\n    currentProcessor?: AddonNotificationsNotificationPreferencesProcessorFormatted; // Calculated in the app. Current processor.\n};\n\n/**\n * Notification preferences processor with some calculated data.\n */\ntype AddonNotificationsNotificationPreferencesProcessorFormatted = AddonNotificationsNotificationPreferencesProcessor & {\n    supported?: boolean; // Calculated in the app. Whether the processor is supported in the app.\n};\n\n/**\n * State in notification processor in notification preferences component with some calculated data.\n */\ntype AddonNotificationsNotificationPreferencesNotificationProcessorStateFormatted =\n        AddonNotificationsNotificationPreferencesNotificationProcessorState & {\n    updating?: boolean; // Calculated in the app. Whether the state is being updated.\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/notifications/pages/settings/settings.ts"],"sourceRoot":""}